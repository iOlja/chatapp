{"ast":null,"code":"var _jsxFileName = \"/Users/ogesvind/Desktop/mychatapp/chatapp/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Messages from \"./Messages\";\nimport { randomColor, randomName } from './Random';\nimport Input from \"./Input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [member, setMember] = useState({\n    username: randomName(),\n    color: randomColor()\n  });\n  const drone = new window.Scaledrone(\"MPfrKpGzAG9Ilhyp\", {\n    data: member\n  });\n  useEffect(() => {\n    drone.on('open', error => {\n      if (error) {\n        return console.error(error);\n      }\n      const updatedMember = {\n        ...member\n      };\n      updatedMember.id = drone.clientId;\n      setMember(updatedMember);\n    });\n    const room = drone.subscribe(\"observable-room\");\n    room.on('data', (data, member) => {\n      setMessages(prevMessages => [...prevMessages, {\n        text: data,\n        member: member\n      }]);\n    });\n\n    // Cleanup function to unsubscribe from the room when component unmounts\n    return () => {\n      room.unsubscribe();\n    };\n  }, [drone, member]);\n  const onSendMessage = message => {\n    drone.publish({\n      room: \"observable-room\",\n      message\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Messages, {\n      messages: messages,\n      currentMember: member\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      onSendMessage: onSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"1xruerNHyrzZL+iljgx/Kgf+y2o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Messages","randomColor","randomName","Input","jsxDEV","_jsxDEV","App","_s","messages","setMessages","member","setMember","username","color","drone","window","Scaledrone","data","on","error","console","updatedMember","id","clientId","room","subscribe","prevMessages","text","unsubscribe","onSendMessage","message","publish","className","children","currentMember","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ogesvind/Desktop/mychatapp/chatapp/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Messages from \"./Messages\";\nimport { randomColor, randomName } from './Random';\nimport Input from \"./Input\";\n\nconst App = () => {\n  const [messages, setMessages] = useState([]);\n  const [member, setMember] = useState({\n    username: randomName(),\n    color: randomColor()\n  });\n  const drone = new window.Scaledrone(\"MPfrKpGzAG9Ilhyp\", {\n    data: member\n  });\n\n  useEffect(() => {\n    drone.on('open', (error) => {\n      if (error) {\n        return console.error(error);\n      }\n      const updatedMember = { ...member };\n      updatedMember.id = drone.clientId;\n      setMember(updatedMember);\n    });\n\n    const room = drone.subscribe(\"observable-room\");\n\n    room.on('data', (data, member) => {\n      setMessages(prevMessages => [\n        ...prevMessages,\n        {\n          text: data,\n          member: member\n        }\n      ]);\n    });\n\n    // Cleanup function to unsubscribe from the room when component unmounts\n    return () => {\n      room.unsubscribe();\n    };\n  }, [drone, member]);\n\n  const onSendMessage = (message) => {\n    drone.publish({\n      room: \"observable-room\",\n      message\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <Messages\n        messages={messages}\n        currentMember={member}\n      />\n      <Input\n        onSendMessage={onSendMessage}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,WAAW,EAAEC,UAAU,QAAQ,UAAU;AAClD,OAAOC,KAAK,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC;IACnCc,QAAQ,EAAEV,UAAU,CAAC,CAAC;IACtBW,KAAK,EAAEZ,WAAW,CAAC;EACrB,CAAC,CAAC;EACF,MAAMa,KAAK,GAAG,IAAIC,MAAM,CAACC,UAAU,CAAC,kBAAkB,EAAE;IACtDC,IAAI,EAAEP;EACR,CAAC,CAAC;EAEFX,SAAS,CAAC,MAAM;IACde,KAAK,CAACI,EAAE,CAAC,MAAM,EAAGC,KAAK,IAAK;MAC1B,IAAIA,KAAK,EAAE;QACT,OAAOC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MAC7B;MACA,MAAME,aAAa,GAAG;QAAE,GAAGX;MAAO,CAAC;MACnCW,aAAa,CAACC,EAAE,GAAGR,KAAK,CAACS,QAAQ;MACjCZ,SAAS,CAACU,aAAa,CAAC;IAC1B,CAAC,CAAC;IAEF,MAAMG,IAAI,GAAGV,KAAK,CAACW,SAAS,CAAC,iBAAiB,CAAC;IAE/CD,IAAI,CAACN,EAAE,CAAC,MAAM,EAAE,CAACD,IAAI,EAAEP,MAAM,KAAK;MAChCD,WAAW,CAACiB,YAAY,IAAI,CAC1B,GAAGA,YAAY,EACf;QACEC,IAAI,EAAEV,IAAI;QACVP,MAAM,EAAEA;MACV,CAAC,CACF,CAAC;IACJ,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXc,IAAI,CAACI,WAAW,CAAC,CAAC;IACpB,CAAC;EACH,CAAC,EAAE,CAACd,KAAK,EAAEJ,MAAM,CAAC,CAAC;EAEnB,MAAMmB,aAAa,GAAIC,OAAO,IAAK;IACjChB,KAAK,CAACiB,OAAO,CAAC;MACZP,IAAI,EAAE,iBAAiB;MACvBM;IACF,CAAC,CAAC;EACJ,CAAC;EAED,oBACEzB,OAAA;IAAK2B,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB5B,OAAA,CAACL,QAAQ;MACPQ,QAAQ,EAAEA,QAAS;MACnB0B,aAAa,EAAExB;IAAO;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CAAC,eACFjC,OAAA,CAACF,KAAK;MACJ0B,aAAa,EAAEA;IAAc;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC/B,EAAA,CAxDID,GAAG;AAAAiC,EAAA,GAAHjC,GAAG;AA0DT,eAAeA,GAAG;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}