{"ast":null,"code":"var _jsxFileName = \"/Users/ogesvind/Desktop/chatapp/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport './App.css';\nimport Messages from './Messages';\nimport { randomColor, randomName } from './Random';\nimport Input from './Input';\nimport 'remixicon/fonts/remixicon.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [member, setMember] = useState({\n    username: randomName(),\n    color: randomColor()\n  });\n  const [onlineUsers, setOnlineUsers] = useState([]);\n\n  // Create a drone instance using useMemo to prevent unnecessary re-creation\n  const drone = useMemo(() => {\n    return new window.Scaledrone('23axSpJJy7sehPRM', {\n      data: member\n    });\n  }, []);\n  useEffect(() => {\n    // When drone connection is open > event listeners\n    drone.on('open', error => {\n      if (error) {\n        return console.error(error);\n      }\n      const updatedMember = {\n        ...member\n      };\n      updatedMember.id = drone.clientId;\n      setMember(updatedMember);\n    });\n    const room = drone.subscribe('observable-room');\n\n    // Who's online\n    room.on('open', error => {\n      if (error) {\n        console.error(error);\n        return;\n      }\n      console.log('Connected to room');\n    });\n\n    // Update the list of online users when members join\n    room.on('members', members => {\n      setOnlineUsers(members);\n    });\n\n    // Add a new member to the online users list when someone joins\n    room.on('member_join', member => {\n      setOnlineUsers(prevUsers => {\n        // Check if the member is already in the list\n        if (prevUsers.some(user => user.id === member.id)) {\n          return prevUsers; // If already in the list, return the previous state\n        }\n\n        return [...prevUsers, member]; // If not in the list, add the member\n      });\n    });\n\n    // Remove a member from the online users list when someone leaves\n    room.on('member_leave', _ref => {\n      let {\n        id\n      } = _ref;\n      setOnlineUsers(prevUsers => prevUsers.filter(user => user.id !== id));\n    });\n\n    // Listening... when a new message comes in, update the messages state\n    room.on('data', (data, member) => {\n      setMessages(prevMessages => [...prevMessages, {\n        text: data,\n        member: member,\n        timestamp: Date.now()\n      }]);\n    });\n  }, [drone, member]);\n  const onSendMessage = message => {\n    // Publish message to the room\n    if (message.trim() !== '') {\n      drone.publish({\n        room: 'observable-room',\n        message\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [\"Hello \", member.username, \"!\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Welcome\",\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 7\n        }, this), \"Currently online and available for a chat are these cool people:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Online-users\",\n        children: onlineUsers.map(user => user.clientData.username).join(', ')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Messages, {\n      messages: messages,\n      currentMember: member\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      onSendMessage: onSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"0dSwxkocpv1hFrOouD2O5Fsb3ho=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","Messages","randomColor","randomName","Input","jsxDEV","_jsxDEV","App","_s","messages","setMessages","member","setMember","username","color","onlineUsers","setOnlineUsers","drone","window","Scaledrone","data","on","error","console","updatedMember","id","clientId","room","subscribe","log","members","prevUsers","some","user","_ref","filter","prevMessages","text","timestamp","Date","now","onSendMessage","message","trim","publish","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","clientData","join","currentMember","_c","$RefreshReg$"],"sources":["/Users/ogesvind/Desktop/chatapp/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport './App.css';\nimport Messages from './Messages';\nimport { randomColor, randomName } from './Random';\nimport Input from './Input';\nimport 'remixicon/fonts/remixicon.css';\n\nconst App = () => {\n  const [messages, setMessages] = useState([]);\n  const [member, setMember] = useState({\n    username: randomName(),\n    color: randomColor(),\n  });\n\n  const [onlineUsers, setOnlineUsers] = useState([]);\n\n  // Create a drone instance using useMemo to prevent unnecessary re-creation\n  const drone = useMemo(() => {\n    return new window.Scaledrone('23axSpJJy7sehPRM', {\n      data: member,\n    });\n  }, []);\n\n  useEffect(() => {\n    // When drone connection is open > event listeners\n    drone.on('open', (error) => {\n      if (error) {\n        return console.error(error);\n      }\n      const updatedMember = { ...member };\n      updatedMember.id = drone.clientId;\n      setMember(updatedMember);\n    });\n\n    const room = drone.subscribe('observable-room');\n\n    // Who's online\n    room.on('open', (error) => {\n      if (error) {\n        console.error(error);\n        return;\n      }\n      console.log('Connected to room');\n    });\n\n    // Update the list of online users when members join\n    room.on('members', (members) => {\n      setOnlineUsers(members);\n    });\n\n    // Add a new member to the online users list when someone joins\n    room.on('member_join', (member) => {\n      setOnlineUsers((prevUsers) => {\n        // Check if the member is already in the list\n        if (prevUsers.some((user) => user.id === member.id)) {\n          return prevUsers; // If already in the list, return the previous state\n        }\n        return [...prevUsers, member]; // If not in the list, add the member\n      });\n    });\n\n    // Remove a member from the online users list when someone leaves\n    room.on('member_leave', ({ id }) => {\n      setOnlineUsers((prevUsers) => prevUsers.filter((user) => user.id !== id));\n    });\n\n    // Listening... when a new message comes in, update the messages state\n    room.on('data', (data, member) => {\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        {\n          text: data,\n          member: member,\n          timestamp: Date.now(),\n        },\n      ]);\n    });\n  }, [drone, member]);\n\n  const onSendMessage = (message) => {\n    // Publish message to the room\n    if (message.trim() !== '') {\n      drone.publish({\n        room: 'observable-room',\n        message,\n      });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\t\t\tHello {member.username}!\n          <div className=\"Welcome\">\n           \n\t\t\t\t\t\t<br/>\n\t\t\t\t\t\tCurrently online and available for a chat are these cool people:\n          </div>\n          <div className=\"Online-users\">\n            {/* Display the usernames of online users */}\n            {onlineUsers.map((user) => user.clientData.username).join(', ')}\n          </div>\n      </header>\n      <Messages messages={messages} currentMember={member} />\n      <Input onSendMessage={onSendMessage} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}