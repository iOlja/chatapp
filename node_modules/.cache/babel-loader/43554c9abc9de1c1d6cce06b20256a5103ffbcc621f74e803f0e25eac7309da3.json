{"ast":null,"code":"var _jsxFileName = \"/Users/ogesvind/Desktop/mychatapp/chatapp/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport './App.css';\nimport Messages from './Messages';\nimport { randomColor, randomName } from './Random';\nimport Input from './Input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [member, setMember] = useState({\n    username: randomName(),\n    color: randomColor()\n  });\n\n  // Create a drone instance using the useMemo hook\n  const drone = useMemo(() => {\n    return new window.Scaledrone('23axSpJJy7sehPRM', {\n      data: member\n    });\n  }, [member]);\n  useEffect(() => {\n    // Set up event listeners once the drone connection is open\n    drone.on('open', error => {\n      if (error) {\n        return console.error(error);\n      }\n      const updatedMember = {\n        ...member\n      };\n      updatedMember.id = drone.clientId;\n      setMember(updatedMember);\n    });\n    const room = drone.subscribe('observable-room');\n\n    // Listen for incoming data in the room and update the messages state\n    room.on('data', (data, member) => {\n      setMessages(prevMessages => [...prevMessages, {\n        text: data,\n        member: member,\n        timestamp: Date.now()\n      }]);\n    });\n  }, [drone, member]);\n  const onSendMessage = message => {\n    // Publish a message using the drone instance\n    if (message.trim() !== '') {\n      drone.publish({\n        room: 'observable-room',\n        message\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [\"C H A T A O N I C A \", /*#__PURE__*/_jsxDEV(\"span\", {\n        role: \"img\",\n        \"aria-label\": \"monkey-emoji\",\n        children: \"\\uD83D\\uDE48 \\uD83D\\uDE49 \\uD83D\\uDE4A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Messages, {\n      messages: messages,\n      currentMember: member\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      onSendMessage: onSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"srTbFjCEaWpu9E9nEie4H7rxH0k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","Messages","randomColor","randomName","Input","jsxDEV","_jsxDEV","App","_s","messages","setMessages","member","setMember","username","color","drone","window","Scaledrone","data","on","error","console","updatedMember","id","clientId","room","subscribe","prevMessages","text","timestamp","Date","now","onSendMessage","message","trim","publish","className","children","role","fileName","_jsxFileName","lineNumber","columnNumber","currentMember","_c","$RefreshReg$"],"sources":["/Users/ogesvind/Desktop/mychatapp/chatapp/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport './App.css';\nimport Messages from './Messages';\nimport { randomColor, randomName } from './Random';\nimport Input from './Input';\n\nconst App = () => {\n  const [messages, setMessages] = useState([]);\n  const [member, setMember] = useState({\n    username: randomName(),\n    color: randomColor(),\n  });\n\n  // Create a drone instance using the useMemo hook\n  const drone = useMemo(() => {\n    return new window.Scaledrone('23axSpJJy7sehPRM', {\n      data: member,\n    });\n  }, [member]);\n\n  useEffect(() => {\n    // Set up event listeners once the drone connection is open\n    drone.on('open', (error) => {\n      if (error) {\n        return console.error(error);\n      }\n      const updatedMember = { ...member };\n      updatedMember.id = drone.clientId;\n      setMember(updatedMember);\n    });\n\n    const room = drone.subscribe('observable-room');\n\n    // Listen for incoming data in the room and update the messages state\n    room.on('data', (data, member) => {\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        {\n          text: data,\n          member: member,\n          timestamp: Date.now(),\n        },\n      ]);\n    });\n  }, [drone, member]);\n\n  const onSendMessage = (message) => {\n    // Publish a message using the drone instance\n    if (message.trim() !== '') {\n      drone.publish({\n        room: 'observable-room',\n        message,\n      });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        C H A T A O N I C A <span role=\"img\" aria-label=\"monkey-emoji\">ðŸ™ˆ ðŸ™‰ ðŸ™Š</span>\n      </header>\n      {/* Render the Messages component with the messages and currentMember props */}\n      <Messages messages={messages} currentMember={member} />\n      {/* Render the Input component with the onSendMessage callback */}\n      <Input onSendMessage={onSendMessage} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}