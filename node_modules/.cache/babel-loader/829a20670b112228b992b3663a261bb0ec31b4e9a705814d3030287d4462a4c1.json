{"ast":null,"code":"var _jsxFileName = \"/Users/ogesvind/Desktop/mychatapp/chatapp/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Messages from \"./Messages\";\nimport { randomColor, randomName } from './Random';\nimport Input from \"./Input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    text: \"This is a test message!\",\n    member: {\n      color: \"blue\",\n      username: \"bluemoon\"\n    }\n  }]);\n  const [member, setMember] = useState({\n    username: randomName(),\n    color: randomColor()\n  });\n  useEffect(() => {\n    const drone = new window.Scaledrone(\"YOUR-CHANNEL-ID\", {\n      data: member\n    });\n    drone.on('open', error => {\n      if (error) {\n        return console.error(error);\n      }\n      const updatedMember = {\n        ...member\n      };\n      updatedMember.id = drone.clientId;\n      setMember(updatedMember);\n    });\n\n    // Cleanup function to disconnect the drone when component unmounts\n    return () => {\n      drone.close();\n    };\n  }, [member]); // Re-run effect whenever member changes\n\n  const onSendMessage = message => {\n    setMessages(prevMessages => [...prevMessages, {\n      text: message,\n      member: member\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Messages, {\n      messages: messages,\n      currentMember: member\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      onSendMessage: onSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"7d7mGz/Y0JRwrwctEounLvq0OAU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Messages","randomColor","randomName","Input","jsxDEV","_jsxDEV","App","_s","messages","setMessages","text","member","color","username","setMember","drone","window","Scaledrone","data","on","error","console","updatedMember","id","clientId","close","onSendMessage","message","prevMessages","className","children","currentMember","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ogesvind/Desktop/mychatapp/chatapp/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Messages from \"./Messages\";\nimport { randomColor, randomName } from './Random';\nimport Input from \"./Input\";\n\nconst App = () => {\n  const [messages, setMessages] = useState([\n    {\n      text: \"This is a test message!\",\n      member: {\n        color: \"blue\",\n        username: \"bluemoon\"\n      }\n    }\n  ]);\n  const [member, setMember] = useState({\n    username: randomName(),\n    color: randomColor()\n  });\n\n  useEffect(() => {\n    const drone = new window.Scaledrone(\"YOUR-CHANNEL-ID\", {\n      data: member\n    });\n\n    drone.on('open', (error) => {\n      if (error) {\n        return console.error(error);\n      }\n      const updatedMember = { ...member };\n      updatedMember.id = drone.clientId;\n      setMember(updatedMember);\n    });\n\n    // Cleanup function to disconnect the drone when component unmounts\n    return () => {\n      drone.close();\n    };\n  }, [member]); // Re-run effect whenever member changes\n\n  const onSendMessage = (message) => {\n    setMessages(prevMessages => [\n      ...prevMessages,\n      {\n        text: message,\n        member: member\n      }\n    ]);\n  };\n\n  return (\n    <div className=\"App\">\n      <Messages\n        messages={messages}\n        currentMember={member}\n      />\n      <Input\n        onSendMessage={onSendMessage}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,WAAW,EAAEC,UAAU,QAAQ,UAAU;AAClD,OAAOC,KAAK,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,CACvC;IACEY,IAAI,EAAE,yBAAyB;IAC/BC,MAAM,EAAE;MACNC,KAAK,EAAE,MAAM;MACbC,QAAQ,EAAE;IACZ;EACF,CAAC,CACF,CAAC;EACF,MAAM,CAACF,MAAM,EAAEG,SAAS,CAAC,GAAGhB,QAAQ,CAAC;IACnCe,QAAQ,EAAEX,UAAU,CAAC,CAAC;IACtBU,KAAK,EAAEX,WAAW,CAAC;EACrB,CAAC,CAAC;EAEFF,SAAS,CAAC,MAAM;IACd,MAAMgB,KAAK,GAAG,IAAIC,MAAM,CAACC,UAAU,CAAC,iBAAiB,EAAE;MACrDC,IAAI,EAAEP;IACR,CAAC,CAAC;IAEFI,KAAK,CAACI,EAAE,CAAC,MAAM,EAAGC,KAAK,IAAK;MAC1B,IAAIA,KAAK,EAAE;QACT,OAAOC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MAC7B;MACA,MAAME,aAAa,GAAG;QAAE,GAAGX;MAAO,CAAC;MACnCW,aAAa,CAACC,EAAE,GAAGR,KAAK,CAACS,QAAQ;MACjCV,SAAS,CAACQ,aAAa,CAAC;IAC1B,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXP,KAAK,CAACU,KAAK,CAAC,CAAC;IACf,CAAC;EACH,CAAC,EAAE,CAACd,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEd,MAAMe,aAAa,GAAIC,OAAO,IAAK;IACjClB,WAAW,CAACmB,YAAY,IAAI,CAC1B,GAAGA,YAAY,EACf;MACElB,IAAI,EAAEiB,OAAO;MACbhB,MAAM,EAAEA;IACV,CAAC,CACF,CAAC;EACJ,CAAC;EAED,oBACEN,OAAA;IAAKwB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBzB,OAAA,CAACL,QAAQ;MACPQ,QAAQ,EAAEA,QAAS;MACnBuB,aAAa,EAAEpB;IAAO;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CAAC,eACF9B,OAAA,CAACF,KAAK;MACJuB,aAAa,EAAEA;IAAc;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC5B,EAAA,CAxDID,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AA0DT,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}