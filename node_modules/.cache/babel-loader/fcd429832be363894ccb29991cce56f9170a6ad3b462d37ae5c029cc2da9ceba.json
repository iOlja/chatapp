{"ast":null,"code":"var _jsxFileName = \"/Users/ogesvind/Desktop/mychatapp/chatapp/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Messages from \"./Messages\";\nimport { randomColor, randomName } from './Random';\nimport Input from \"./Input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [member, setMember] = useState({\n    username: randomName(),\n    color: randomColor()\n  });\n  state = {\n    messages: [],\n    member: {\n      username: randomName(),\n      color: randomColor()\n    }\n  };\n  useEffect(() => {\n    const drone = new window.Scaledrone(\"MPfrKpGzAG9Ilhyp\", {\n      data: member\n    });\n    drone.on('open', error => {\n      if (error) {\n        return console.error(error);\n      }\n      const updatedMember = {\n        ...member\n      };\n      updatedMember.id = drone.clientId;\n      setMember(updatedMember);\n    });\n\n    // Cleanup function to disconnect the drone when component unmounts\n    return () => {\n      drone.close();\n    };\n  }, [member]); // Re-run effect whenever member changes\n\n  const onSendMessage = message => {\n    setMessages(prevMessages => [...prevMessages, {\n      text: message,\n      member: member\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Messages, {\n      messages: messages,\n      currentMember: member\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      onSendMessage: onSendMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"1xruerNHyrzZL+iljgx/Kgf+y2o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Messages","randomColor","randomName","Input","jsxDEV","_jsxDEV","App","_s","messages","setMessages","member","setMember","username","color","state","drone","window","Scaledrone","data","on","error","console","updatedMember","id","clientId","close","onSendMessage","message","prevMessages","text","className","children","currentMember","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ogesvind/Desktop/mychatapp/chatapp/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Messages from \"./Messages\";\nimport { randomColor, randomName } from './Random';\nimport Input from \"./Input\";\n\nconst App = () => {\n  const [messages, setMessages] = useState([]);\n  const [member, setMember] = useState({\n    username: randomName(),\n    color: randomColor()\n  });\n\n  state = {\n    messages: [],\n    member: {\n      username: randomName(),\n      color: randomColor()\n    }\n  }\n\n  useEffect(() => {\n    const drone = new window.Scaledrone(\"MPfrKpGzAG9Ilhyp\", {\n      data: member\n    });\n\n    drone.on('open', (error) => {\n      if (error) {\n        return console.error(error);\n      }\n      const updatedMember = { ...member };\n      updatedMember.id = drone.clientId;\n      setMember(updatedMember);\n    });\n\n    // Cleanup function to disconnect the drone when component unmounts\n    return () => {\n      drone.close();\n    };\n  }, [member]); // Re-run effect whenever member changes\n\n  const onSendMessage = (message) => {\n    setMessages(prevMessages => [\n      ...prevMessages,\n      {\n        text: message,\n        member: member\n      }\n    ]);\n  };\n\n  return (\n    <div className=\"App\">\n      <Messages\n        messages={messages}\n        currentMember={member}\n      />\n      <Input\n        onSendMessage={onSendMessage}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,WAAW,EAAEC,UAAU,QAAQ,UAAU;AAClD,OAAOC,KAAK,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC;IACnCc,QAAQ,EAAEV,UAAU,CAAC,CAAC;IACtBW,KAAK,EAAEZ,WAAW,CAAC;EACrB,CAAC,CAAC;EAEFa,KAAK,GAAG;IACNN,QAAQ,EAAE,EAAE;IACZE,MAAM,EAAE;MACNE,QAAQ,EAAEV,UAAU,CAAC,CAAC;MACtBW,KAAK,EAAEZ,WAAW,CAAC;IACrB;EACF,CAAC;EAEDF,SAAS,CAAC,MAAM;IACd,MAAMgB,KAAK,GAAG,IAAIC,MAAM,CAACC,UAAU,CAAC,kBAAkB,EAAE;MACtDC,IAAI,EAAER;IACR,CAAC,CAAC;IAEFK,KAAK,CAACI,EAAE,CAAC,MAAM,EAAGC,KAAK,IAAK;MAC1B,IAAIA,KAAK,EAAE;QACT,OAAOC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MAC7B;MACA,MAAME,aAAa,GAAG;QAAE,GAAGZ;MAAO,CAAC;MACnCY,aAAa,CAACC,EAAE,GAAGR,KAAK,CAACS,QAAQ;MACjCb,SAAS,CAACW,aAAa,CAAC;IAC1B,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXP,KAAK,CAACU,KAAK,CAAC,CAAC;IACf,CAAC;EACH,CAAC,EAAE,CAACf,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEd,MAAMgB,aAAa,GAAIC,OAAO,IAAK;IACjClB,WAAW,CAACmB,YAAY,IAAI,CAC1B,GAAGA,YAAY,EACf;MACEC,IAAI,EAAEF,OAAO;MACbjB,MAAM,EAAEA;IACV,CAAC,CACF,CAAC;EACJ,CAAC;EAED,oBACEL,OAAA;IAAKyB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB1B,OAAA,CAACL,QAAQ;MACPQ,QAAQ,EAAEA,QAAS;MACnBwB,aAAa,EAAEtB;IAAO;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CAAC,eACF/B,OAAA,CAACF,KAAK;MACJuB,aAAa,EAAEA;IAAc;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC7B,EAAA,CAxDID,GAAG;AAAA+B,EAAA,GAAH/B,GAAG;AA0DT,eAAeA,GAAG;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}